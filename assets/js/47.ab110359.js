(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{526:function(_,v,t){"use strict";t.r(v);var n=t(4),r=Object(n.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"如何评判算法好坏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何评判算法好坏"}},[_._v("#")]),_._v(" 如何评判算法好坏")]),_._v(" "),t("p",[_._v("算法好坏可以通过下面两个纬度进行评判：")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("时间复杂度")]),_._v(" "),t("p",[_._v("评估执行程序的次数（执行时间）")])]),_._v(" "),t("li",[t("p",[_._v("空间复杂度")]),_._v(" "),t("p",[_._v("评估执行程序所需的存储空间")])])]),_._v(" "),t("h2",{attrs:{id:"时间复杂度和空间复杂度描述方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度和空间复杂度描述方式"}},[_._v("#")]),_._v(" 时间复杂度和空间复杂度描述方式")]),_._v(" "),t("p",[_._v("一般用 "),t("code",[_._v("大O表示法")]),_._v(" 来描述复杂度，表示 "),t("code",[_._v("数据规模n")]),_._v(" 对应的复杂度。"),t("strong",[_._v("不过要注意 "),t("code",[_._v("大O表示法")]),_._v(" 仅仅是一种粗略的分析模型")]),_._v("，是一种估算，用来帮助我们在短时间内了解一个算法的执行效率。")]),_._v(" "),t("h3",{attrs:{id:"时间复杂度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[_._v("#")]),_._v(" 时间复杂度")]),_._v(" "),t("p",[_._v('时间复杂度又称"渐进式时间复杂度"，用来'),t("strong",[_._v("表示代码执行时间与数据规模之间的增长关系")]),_._v("。")]),_._v(" "),t("p",[_._v("时间复杂度的推倒步骤：")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("找出算法中的基本语句")]),_._v(" "),t("p",[_._v("算法中执行次数最多的那条语句就是基本语句，通常是最内层循环的循环体。")])]),_._v(" "),t("li",[t("p",[_._v("计算基本语句的执行次数的数量级")]),_._v(" "),t("p",[_._v("只需计算基本语句执行次数的数量级，这就意味着只要保证基本语句执行次数的函数中的最高次幂正确即可，可以忽略所有低次幂和最高次幂的系数。这样能够简化算法分析，并且使注意力集中在最重要的一点上：增长率。"),t("strong",[_._v("可以简单概括为忽略常数、系数、低阶")]),_._v("。")])]),_._v(" "),t("li",[t("p",[_._v("用大Ο记号表示算法的时间性能")]),_._v(" "),t("p",[_._v("将基本语句执行次数的数量级放入大Ο记号中。")])])]),_._v(" "),t("p",[_._v("简单举几个推倒大O表达式的例子：")]),_._v(" "),t("ul",[t("li",[_._v("$9$ => $O(1)$")]),_._v(" "),t("li",[_._v("$2n + 3$ => $O(n)$")]),_._v(" "),t("li",[_._v("$n^2 + 2n + 3$ => $O(n^2)$")]),_._v(" "),t("li",[_._v("$4n^3 + 3n^2 + 22n + 100$ => $O(n^3)$")]),_._v(" "),t("li",[_._v("$5log_2n+20$ => $O(logn)$")]),_._v(" "),t("li",[_._v("$2n+3nlog_2n+19$ => $O(nlogn)$")]),_._v(" "),t("li",[_._v("$2n$ => $O(2^n)$")])]),_._v(" "),t("h4",{attrs:{id:"常见的算法时间复杂度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见的算法时间复杂度"}},[_._v("#")]),_._v(" 常见的算法时间复杂度")]),_._v(" "),t("p",[t("strong",[_._v("由小到大")]),_._v("依次为：常量阶 $O(1)$ < 对数阶 $O(logn)$ <  线性阶 $O(n)$ < 线性对数阶 $O(nlogn)$ < 平方阶 $O(n^2)$ < 立方阶 $O(n^3)$ < k 方阶... < 指数阶 $O(2^n)$ < 阶乘阶 $O(n!)$")]),_._v(" "),t("h3",{attrs:{id:"空间复杂度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度"}},[_._v("#")]),_._v(" 空间复杂度")]),_._v(" "),t("p",[_._v('空间复杂度，又称"渐进空间复杂度"，用来'),t("strong",[_._v("表示代码存储空间与数据规模之间的增长关系。")]),_._v("。")]),_._v(" "),t("p",[_._v("空间复杂度包含三个部分：输入数据所占的存储空间，程序本身所占的空间，算法执行过程中所需的存储空间。")]),_._v(" "),t("p",[_._v("我们谈的空间复杂度，一般都是在讨论第三个部分，即"),t("strong",[_._v("算法执行过程中所需的存储空间")]),_._v("。因为前两个部分，与算法并无太大关系，是由输入数据的规模以及编译链接后生成的可执行程序的大小决定。")]),_._v(" "),t("p",[_._v("空间复杂度的推倒规则：")]),_._v(" "),t("ol",[t("li",[_._v("当一个算法的需要的空间为一个常量，即不随被处理 "),t("code",[_._v("数据规模n")]),_._v(" 的大小而改变时，可表示为 $O(1)$")]),_._v(" "),t("li",[_._v("当一个算法的需要的空间和 "),t("code",[_._v("数据规模n")]),_._v(" 成正比，可表示为 $O(n)$")])]),_._v(" "),t("blockquote",[t("p",[_._v("当然像 $O(n^2)、O(n^3)、O(logn)、O(nlogn)$ 也有，不过很少见。")])]),_._v(" "),t("h2",{attrs:{id:"如何优化算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何优化算法"}},[_._v("#")]),_._v(" 如何优化算法")]),_._v(" "),t("ol",[t("li",[_._v("用尽量少的存储空间")]),_._v(" "),t("li",[_._v("用尽量少的执行步骤")]),_._v(" "),t("li",[_._v("根据具体情况，选择空间换时间或时间换空间")])]),_._v(" "),t("h2",{attrs:{id:"参考文献"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[_._v("#")]),_._v(" 参考文献")]),_._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"https://baike.baidu.com/item/%E5%A4%A7O%E8%A1%A8%E7%A4%BA%E6%B3%95/1851162?fr=aladdin#3",target:"_blank",rel:"noopener noreferrer"}},[_._v("大O表示法"),t("OutboundLink")],1)]),_._v(" "),t("li",[t("a",{attrs:{href:"https://www.zhihu.com/question/310964983/answer/588135727",target:"_blank",rel:"noopener noreferrer"}},[_._v("如何理解算法的空间复杂度？"),t("OutboundLink")],1)])]),_._v(" "),t("hr"),_._v(" "),t("blockquote",[t("p",[_._v("Title: 如何评判算法好坏")]),_._v(" "),t("p",[_._v("Date: 2020.07.22")]),_._v(" "),t("p",[_._v("Author: zhangpeng")]),_._v(" "),t("p",[_._v("Github: "),t("a",{attrs:{href:"https://github.com/fullstack-zhangpeng",target:"_blank",rel:"noopener noreferrer"}},[_._v("https://github.com/fullstack-zhangpeng"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=r.exports}}]);