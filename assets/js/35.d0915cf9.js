(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{514:function(t,a,s){"use strict";s.r(a);var n=s(4),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"ios-消息转发机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ios-消息转发机制"}},[t._v("#")]),t._v(" iOS 消息转发机制")]),t._v(" "),s("p",[t._v("当对象接收到无法解读的消息（"),s("code",[t._v("unrecognized selector sent to instance 0x87")]),t._v("），就会启动消息转发机制，由程序员指定处理方法。")]),t._v(" "),s("h2",{attrs:{id:"消息转发两大阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息转发两大阶段"}},[t._v("#")]),t._v(" 消息转发两大阶段")]),t._v(" "),s("ol",[s("li",[t._v("动态方法解析"),s("br"),t._v("\n检查当前接收者能否动态添加方法，处理这个"),s("code",[t._v("unrecognized selector")]),t._v("。")]),t._v(" "),s("li",[t._v("完整的消息转发"),s("br"),t._v("\n第一阶段执行完毕后，如接收者不能以动态新增方法处理这个"),s("code",[t._v("unrecognized selector")]),t._v("，接下来，会分两种情况：\n"),s("ul",[s("li",[t._v("有备援接收者（replacement receiver）"),s("br"),t._v("\n在运行期将消息转给备援接收者，由备援接收者完成消息的处理。")]),t._v(" "),s("li",[t._v("无备援接收者（replacement receiver）")]),t._v(" "),s("li",[t._v("启动一套“完整的消息转发机制”，将消息封装到NSInvocation对象中，交给接收者处理。")])])])]),t._v(" "),s("h3",{attrs:{id:"动态方法解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态方法解析"}},[t._v("#")]),t._v(" 动态方法解析")]),t._v(" "),s("p",[t._v("如果没有找到需要执行的方法，会根据方法的类型，执行不同的处理方法。")]),t._v(" "),s("p",[t._v("处理无法调用的"),s("strong",[t._v("类方法")])]),t._v(" "),s("div",{staticClass:"language-objc extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objc"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BOOL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("resolveClassMethod"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SEL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("sel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("处理无法调用的"),s("strong",[t._v("实例方法")])]),t._v(" "),s("div",{staticClass:"language-objc extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objc"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BOOL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("resolveInstanceMethod"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SEL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("sel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("一般是提前写好相关的实现代码，通过 Runtime 在此处插入到类中。")]),t._v(" "),s("p",[s("strong",[t._v("e.g.")])]),t._v(" "),s("div",{staticClass:"language-objc extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objc"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n 没有找到SEL的实现时会执行下方的方法\n @param sel 当前对象调用并且找不到IML的SEL\n @return 是否可以处理这个方法，并返回yes\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BOOL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("resolveInstanceMethod"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SEL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("sel\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当返回YES时")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在这里通过Runtime在将已经写好实现的代码插入到类中。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" YES"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当返回NO时")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 会接着执行forwordingTargetForSelector:方法")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    return NO;  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"消息转发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息转发"}},[t._v("#")]),t._v(" 消息转发")]),t._v(" "),s("h4",{attrs:{id:"有备援接收者"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有备援接收者"}},[t._v("#")]),t._v(" 有备援接收者")]),t._v(" "),s("p",[t._v("在方法 "),s("code",[t._v("- (id)forwardingTargetForSelector:(SEL)aSelector")]),t._v(" 中返回可以处理该消息的对象，交由该对象去处理这个消息。"),s("br"),t._v("\n如果此处返回nil，则表示没有其他对象可以处理这个消息，然后通过完整的消息转发机制来处理。")]),t._v(" "),s("div",{staticClass:"language-objc extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objc"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n 将当前对象不存在的SEL传给其他存在该SEL的对象\n @param aSelector 当前类中不存在的SEL\n @return 存在该SEL的对象\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("forwardingTargetForSelector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SEL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("aSelector \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不传递给其他对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将会执行- (void)forwardInvocation:(NSInvocation *)anInvocation;")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" nil"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 传递给一个其他对象，处理这个方法。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以做相应的错误处理等")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 让OtherClass中相应的SEL去执行该方法")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    return [[OtherClass alloc] init];")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"无备援接收者"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#无备援接收者"}},[t._v("#")]),t._v(" 无备援接收者")]),t._v(" "),s("p",[t._v("如果接收者不能处理消息，并且没有备援接收者，最终只能采取一个完整的消息转发来处理消息。")]),t._v(" "),s("p",[t._v("通过NSInvocation包装方法的目标、参数等，然后通过 "),s("code",[t._v("- (void)forwardInvocation:(NSInvocation *)invocation")]),t._v(" 将消息指派给目标对象。")]),t._v(" "),s("div",{staticClass:"language-objc extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objc"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("forwardInvocation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSInvocation "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("invocation\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    SecondClass "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" forwardClass "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("SecondClass new"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    SEL sel "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" invocation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("selector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("forwardClass respondsToSelector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("sel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("invocation invokeWithTarget"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("forwardClass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" doesNotRecognizeSelector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("sel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("hr"),t._v(" "),s("blockquote",[s("p",[t._v("Title: iOS 消息转发机制")]),t._v(" "),s("p",[t._v("Date: 2018.04.02")]),t._v(" "),s("p",[t._v("Author: zhangpeng")]),t._v(" "),s("p",[t._v("Github: "),s("a",{attrs:{href:"https://github.com/fullstack-zhangpeng",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/fullstack-zhangpeng"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);