(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{511:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"类的初始化方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类的初始化方法"}},[t._v("#")]),t._v(" 类的初始化方法")]),t._v(" "),a("p",[a("strong",[t._v("原文链接："),a("a",{attrs:{href:"https://mp.weixin.qq.com/s/Qs5JDavftrlpnGkb1BTlnw",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入了解 iOS 的初始化"),a("OutboundLink")],1),t._v("，本文是阅读以后的摘抄。")])]),t._v(" "),a("p",[t._v("类（结构体、枚举）的初始化有两种初始化器（初始化方法）：")]),t._v(" "),a("ul",[a("li",[t._v("指定初始化器（Designated Initializers ）")]),t._v(" "),a("li",[t._v("便利初始化器（Convenience Initializers）")])]),t._v(" "),a("h2",{attrs:{id:"指定初始化器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指定初始化器"}},[t._v("#")]),t._v(" 指定初始化器")]),t._v(" "),a("p",[t._v("指定构造器是类中最主要的构造器。一个指定构造器将初始化类中提供的所有属性，并调用合适的父类构造器让构造过程沿着父类链继续往上进行。")]),t._v(" "),a("h2",{attrs:{id:"便利初始化器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#便利初始化器"}},[t._v("#")]),t._v(" 便利初始化器")]),t._v(" "),a("p",[t._v("便利初始化器是类（结构体、枚举）的次要初始化器，作用是使类（结构体、枚举）在初始化时更方便设置相关的属性（成员变量）。便利初始化器里面最后都需要调用自身的指定初始化器。")]),t._v(" "),a("h2",{attrs:{id:"核心原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心原则"}},[t._v("#")]),t._v(" 核心原则")]),t._v(" "),a("ol",[a("li",[t._v("必须至少有一个指定初始化器，在指定初始化器里保证所有非可选类型属性都得到正确的初始化（有值）")]),t._v(" "),a("li",[t._v("便利初始化器必须调用其他初始化器，使得最后肯定会调用指定初始化器")])]),t._v(" "),a("p",[t._v("如果文字不好理解，可以根据下面的图，进行理解：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://docs.swift.org/swift-book/_images/initializerDelegation02_2x.png",alt:"核心原则图解"}})]),t._v(" "),a("h2",{attrs:{id:"objective-c-和-swift-的差异"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#objective-c-和-swift-的差异"}},[t._v("#")]),t._v(" Objective-C 和 Swift 的差异")]),t._v(" "),a("h3",{attrs:{id:"objective-c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#objective-c"}},[t._v("#")]),t._v(" Objective-C")]),t._v(" "),a("p",[a("code",[t._v("Objective-C")]),t._v(" 在初始化时，会"),a("strong",[t._v("自动给每个属性（成员变量）赋值为 0 或者 nil")]),t._v("，没有强制要求额外为每个属性（成员变量）赋值，"),a("strong",[t._v("方便的同时也缺少了代码的安全性")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("Objective-C")]),t._v(" 中的指定初始化器会在后面被 "),a("code",[t._v("NS_DESIGNATED_INITIALIZER")]),t._v(" 修饰，以下为 "),a("code",[t._v("NSObject")]),t._v("  和 "),a("code",[t._v("UIView")]),t._v(" 的指定初始化器：")]),t._v(" "),a("div",{staticClass:"language-objc extra-class"},[a("pre",{pre:!0,attrs:{class:"language-objc"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NSObject")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" NSObject "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("NSObject"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instancetype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("init\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER")])]),t._v("\n    NS_DESIGNATED_INITIALIZER\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// UIView")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" UIView "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" UIResponder\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instancetype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("initWithFrame"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CGRect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("frame NS_DESIGNATED_INITIALIZER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nullable instancetype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("initWithCoder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSCoder "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("coder NS_DESIGNATED_INITIALIZER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n")])])]),a("p",[t._v("无论继承自什么类，都经常需要新的初始化方法，而这个新的初始化方法其实就是新的指定初始化器。"),a("strong",[t._v("如果存在一个新的指定初始化器，那么原来的指定初始化器就会自动退化成便利初始化器。为了遵循必须要调用指定初始化器的规则，就必须重写旧的定初始化器，在里面调用新的指定初始化器，这样就能确保所有属性（成员变量）被初始化。")])]),t._v(" "),a("h4",{attrs:{id:"举例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#举例"}},[t._v("#")]),t._v(" 举例")]),t._v(" "),a("p",[t._v("由于UIView拥有新的指定初始化器 "),a("code",[t._v("-initWithFrame:")]),t._v("，导致父类 "),a("code",[t._v("NSObject")]),t._v(" 的指定初始化器 "),a("code",[t._v("-init")]),t._v(" 退化成便利初始化器。所以当调用 "),a("code",[t._v("[[UIView alloc] init]")]),t._v(" 时，"),a("code",[t._v("-init")]),t._v(" 里面必然调用了 "),a("code",[t._v("-initWithFrame:")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"建议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#建议"}},[t._v("#")]),t._v(" 建议")]),t._v(" "),a("p",[t._v("当存在一个新的指定初始化器的时候，推荐在方法名后面加上 "),a("code",[t._v("NS_DESIGNATED_INITIALIZER")]),t._v("，主动告诉编译器有一个新的指定初始化器，这样就可以使用 Xcode 自带的Analysis功能分析，找出初始化过程中可能存在的漏洞。")]),t._v(" "),a("p",[t._v("如果不想去重写旧的指定初始化器，但又不想存在漏洞和隐患，那么可以使用 "),a("code",[t._v("NS_UNAVAILABLE")]),t._v(" 把旧的指定初始化器都废弃，外界就无法调用旧的指定初始化器。")]),t._v(" "),a("h3",{attrs:{id:"swift"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swift"}},[t._v("#")]),t._v(" Swift")]),t._v(" "),a("p",[t._v("相对于 "),a("code",[t._v("Objective-C")]),t._v("，"),a("code",[t._v("Swift")]),t._v(" 多了一些规则：")]),t._v(" "),a("ol",[a("li",[t._v("初始化的时候需要保证类（结构体、枚举）的所有非可选类型属性都会有值，否则会报错")]),t._v(" "),a("li",[t._v("在没有给所有非可选类型属性赋值（初始化完成）之前，不能调用self相关的任何东西，例如：调用实例属性，调用实例方法")])]),t._v(" "),a("h4",{attrs:{id:"不存在继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不存在继承"}},[t._v("#")]),t._v(" 不存在继承")]),t._v(" "),a("p",[t._v("这种情况处理就十分简单，自己里面的 "),a("code",[t._v("init")]),t._v(" 方法就是它的指定初始化器，而且可以随意创建多个它的指定初始化器。如果需要创建便利初始化器，则在方法名前面加上 "),a("code",[t._v("convenience")]),t._v("，且在里面必须调用其他初始化器，使得最后肯定调用指定初始化器。")]),t._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Double")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"存在继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存在继承"}},[t._v("#")]),t._v(" 存在继承")]),t._v(" "),a("p",[t._v("如果"),a("strong",[t._v("子类没有新的非可选类型属性，或者保证所有非可选类型属性都已经有默认值")]),t._v("，则可以直接继承父类的指定初始化器和便利初始化器。")]),t._v(" "),a("p",[t._v("如果"),a("strong",[t._v("子类有新的非可选类型属性，或者无法保证所有非可选类型属性都已经有默认值")]),t._v("，则需要新创建一个指定初始化器，或者重写父类的指定初始化器。")]),t._v(" "),a("ul",[a("li",[t._v("新创建一个指定初始化器，会覆盖父类的指定初始化器，需要先给当前类所有非可选类型属性赋值，然后再调用父类的指定初始化器")]),t._v(" "),a("li",[t._v("重写父类的指定初始化器，需要先给当前类所有非可选类型属性赋值，然后再调用父类的指定初始化器")]),t._v(" "),a("li",[t._v("在保证子类有指定初始化器，才能创建便利初始化器，且在便利初始化器里面必须调用指定初始化器")])]),t._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Double")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新的指定初始化器，如果有新的指定初始化器，就不会继承父类的所有初始化器，除非重写")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("score "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" score\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重写父类的指定初始化器，如果不重写，则子类不存在这个方法")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        score "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 便利初始化器")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("convenience")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 必须要调用自己的指定初始化器")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("需要注意的是，**如果子类重写父类所有指定初始化器，则会继承父类的便利初始化器。**原因也是很简单，因为父类的便利初始化器，依赖于自己的指定初始化器。")]),t._v(" "),a("h4",{attrs:{id:"可失败的初始化器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可失败的初始化器"}},[t._v("#")]),t._v(" 可失败的初始化器")]),t._v(" "),a("p",[t._v("可失败的初始化器（Failable Initializers），表示在某些情况下会创建实例失败。只有在表示创建失败的时候才有返回值，并且返回值为  "),a("code",[t._v("nil")]),t._v("。")]),t._v(" "),a("p",[t._v("子类可以把父类的可失败的初始化器重写为不可失败的初始化器，但不能把父类的不可失败的初始化器重写为可失败的初始化器。")]),t._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可失败的初始化器，如果把 ! 换成 ?，则为隐式的可失败的初始化器")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("isEmpty")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("nil")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Animal")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("isEmpty")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"旺财"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"必须的初始化器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#必须的初始化器"}},[t._v("#")]),t._v(" 必须的初始化器")]),t._v(" "),a("p",[t._v("可以使用 "),a("code",[t._v("required")]),t._v(" 修饰初始化器，来指定子类必须实现该初始化器。需要注意的是，如果子类可以直接继承父类的指定初始化器和便利初始化器，也就可以不用额外实现required修饰的初始化器。")]),t._v(" "),a("hr"),t._v(" "),a("blockquote",[a("p",[t._v("Title: 类的初始化方法")]),t._v(" "),a("p",[t._v("Date: 2019.12.05")]),t._v(" "),a("p",[t._v("Author: zhangpeng")]),t._v(" "),a("p",[t._v("Github: "),a("a",{attrs:{href:"https://github.com/fullstack-zhangpeng",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/fullstack-zhangpeng"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);